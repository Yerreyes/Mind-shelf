"use server";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();
// This function does not receive the previous state (...prevState) because it is not utilizing the useFormState hook, which is typically used for managing form state in React.

function helperTransformData(formData) {
  const transformed = {
    category: formData.get("category"),
    title: formData.get("title"),
    fields: {},
  };

  formData.delete("category");
  formData.delete("title");
  for (const [key, value] of formData.entries()) {
    //that sentence avoids to store the autoId generated by next js form
    if (!key.startsWith("$ACTION_ID_")) {
      transformed.fields[key] = value;
    }
  }

  return transformed;
}

export async function saveModule(formData) {
  const data = helperTransformData(formData);

  await prisma.module.create({
    data: data,
  });
  
  console.log(await getModules());
  return {};
}

export async function getModules() {
    return await prisma.module.findMany();
}
