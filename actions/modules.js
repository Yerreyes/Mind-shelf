"use server";
import prisma from "@/lib/prisma.js";

/**
 * Transforms form data into a structured object.
 * Extracts the "category" and "title" fields and organizes the remaining fields into a "fields" object.
 *
 * @param {FormData} formData - The form data to transform.
 * @returns {Object} An object containing the category, title, and fields.
 */
function helperTransformData(formData) {
  const transformed = {
    category: formData.get("category"),
    title: formData.get("title"),
    // Skip storing auto-generated IDs from Next.js forms
    fields: {},
  };

  formData.delete("category");
  formData.delete("title");
  for (const [key, value] of formData.entries()) {
    //that sentence avoids to store the autoId generated by next js form
    if (!key.startsWith("$ACTION")) {
      transformed.fields[key] = value;
    }
  }
  return transformed;
}

export async function saveDataAction(prev, formData) {
  console.log(formData);
  try {
    const data = await helperTransformData(formData);
    console.log(data);
    await prisma.module.create({
      data: data,
    });
    return { success: true, message: "Se añadió correctamente" };
  } catch (error) {
    return { success: false, message: "Ocurrió un error" + error};
  }
}

export async function getModules() {
  try {
    return await prisma.module.findMany();
  } catch (error) {
    console.error("Error fetching modules:", error);
    throw new Error("Failed to fetch modules. Please try again later.");
  }
}

export async function getModulesByCategory(category) {
  try {
    const modules = await prisma.module.findMany({
      where: { category: category },
    });
    return modules;
  } catch (error) {
    return handleError(
      error,
      "Ocurrió al consultar los módulos en la base de datos"
    );
  }
}

export async function getModule(id) {
  try {
    const module = await prisma.module.findFirst({
      where: { id: id },
    });
    return module;
  } catch (error) {
    return handleError(
      error,
      "Ocurrió al consultar el modulo en la base de datos"
    );
  }
}

export async function deleteModule(id) {
  try {
    const deletedItem = await prisma.module.delete({
      where: { id },
    });
    console.log(deletedItem);
    if (!deletedItem) {
      return {
        success: false,
        message: "El módulo por eliminar no existe",
      };
    }
    return { success: true, message: "Se elimino con éxito" };
  } catch (error) {
    return handleError(error, "Ocurrió un error al eliminar el módulo" + error);
  }
}

export async function editModule(_, { formData, id }) {
  try {
    const data = helperTransformData(formData);
    const updateModule = await prisma.module.update({
      where: { id },
      data,
    });

    if (!updateModule) {
      return {
        success: false,
        message: "El módulo por editar no existe",
      };
    }
    return { success: true, message: "Se editó correctamente" };
  } catch (error) {
    console.error("Error editing module:", error);
    return handleError(error, "Ocurrió un error al editar el módulo");
  }
}

function handleError(error, defaultMessage) {
  return { success: false, message: defaultMessage || "Ocurcrió un error" + error };
}
